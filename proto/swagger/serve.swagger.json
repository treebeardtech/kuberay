{
  "swagger": "2.0",
  "info": {
    "title": "serve.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "RayServeService"
    }
  ],
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/apis/v1alpha2/namespaces/{namespace}/services": {
      "get": {
        "summary": "Finds all ray services in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "RayServeService_ListRayServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListRayServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the ray services to be retrieved.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "pageToken",
            "description": "A page token to request the next page of results. The token is acquried\nfrom the nextPageToken field of the response from the previous\nListRayServices call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The number of RayServices to be listed per page. If there are more\nRayServices than this number, the response message will contain a\nnextPageToken field you can use to fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      },
      "post": {
        "summary": "Create a new ray serve.",
        "operationId": "RayServeService_CreateRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the ray service to be created.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The ray service to be created.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/services/{name}": {
      "get": {
        "summary": "Find a specific ray serve by name and namespace.",
        "operationId": "RayServeService_GetRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace used for retrieving the ray service.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name used for retrieving the ray service.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      },
      "delete": {
        "summary": "Deletes a ray service by its name and namespace",
        "operationId": "RayServeService_DeleteRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the ray service to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the ray service to be deleted.",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      },
      "put": {
        "summary": "Update a ray serve.\nWe may",
        "operationId": "RayServeService_UpdateRayService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of the ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The ray service to be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    },
    "/apis/v1alpha2/namespaces/{namespace}/services/{name}/configs": {
      "patch": {
        "summary": "Update a ray serve configs.\nPatch mode update without possible deletion the existing raycluster under the hood. \nonly support update the service configs and worker.",
        "operationId": "RayServeService_UpdateRayServiceConfigs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoRayService"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "namespace",
            "description": "The namespace of the ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "description": "The name of ray service to be updated.",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "description": "The ray service to be updated.",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/protoUpdateRayServiceBody"
            }
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    },
    "/apis/v1alpha2/services": {
      "get": {
        "summary": "Finds all ray services in a given namespace. Supports pagination, and sorting on certain fields.",
        "operationId": "RayServeService_ListAllRayServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/protoListAllRayServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "pageToken",
            "description": "A page token to request the next page of results. The token is acquried\nfrom the nextPageToken field of the response from the previous\nListRayServices call or can be omitted when fetching the first page.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "pageSize",
            "description": "The number of RayServices to be listed per page. If there are more\nRayServices than this number, the response message will contain a\nnextPageToken field you can use to fetch the next page.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "tags": [
          "RayServeService"
        ]
      }
    }
  },
  "definitions": {
    "VolumeHostPathType": {
      "type": "string",
      "enum": [
        "DIRECTORY",
        "FILE"
      ],
      "default": "DIRECTORY",
      "description": "If indicate hostpath, we need to let user indicate which type \nthey would like to use."
    },
    "VolumeMountPropagationMode": {
      "type": "string",
      "enum": [
        "NONE",
        "HOSTTOCONTAINER",
        "BIDIRECTIONAL"
      ],
      "default": "NONE"
    },
    "VolumeVolumeType": {
      "type": "string",
      "enum": [
        "PERSISTENT_VOLUME_CLAIM",
        "HOST_PATH"
      ],
      "default": "PERSISTENT_VOLUME_CLAIM"
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protoActorOptions": {
      "type": "object",
      "properties": {
        "runtimeEnv": {
          "type": "string",
          "description": "This deployment's runtime_env used by the actor."
        },
        "cpusPerActor": {
          "type": "number",
          "format": "double",
          "description": "The number of CPUs required by the deployment's application per replica."
        },
        "gpusPerActor": {
          "type": "number",
          "format": "double",
          "description": "The number of GPUs required by the deployment's application per replica."
        },
        "memoryPerActor": {
          "type": "integer",
          "format": "int32",
          "description": "Restrict the heap memory usage of each replica."
        },
        "objectStoreMemoryPerActor": {
          "type": "integer",
          "format": "int32",
          "description": "Restrict the object store memory used per replica when creating objects."
        },
        "customResource": {
          "type": "string",
          "description": "The custom resources required by each replica."
        },
        "accceleratorType": {
          "type": "string",
          "description": "Forces replicas to run on nodes with the specified accelerator type."
        }
      },
      "description": "ActorOptions config actor configuration related to one serve deployement."
    },
    "protoClusterSpec": {
      "type": "object",
      "properties": {
        "headGroupSpec": {
          "$ref": "#/definitions/protoHeadGroupSpec",
          "title": "The head group configuration"
        },
        "workerGroupSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoWorkerGroupSpec"
          },
          "title": "The worker group configurations"
        }
      }
    },
    "protoHeadGroupSpec": {
      "type": "object",
      "properties": {
        "computeTemplate": {
          "type": "string",
          "title": "Optional. The computeTemplate of head node group"
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "serviceType": {
          "type": "string",
          "title": "Optional. The service type (ClusterIP, NodePort, Load balancer) of the head node"
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. The ray start params of head node group"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to head pod"
        }
      }
    },
    "protoListAllRayServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayService"
          }
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of RayServices for the given query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to list the next page of RayServices."
        }
      }
    },
    "protoListRayServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayService"
          }
        },
        "totalSize": {
          "type": "integer",
          "format": "int32",
          "description": "The total number of RayServices for the given query."
        },
        "nextPageToken": {
          "type": "string",
          "description": "The token to list the next page of RayServices."
        }
      }
    },
    "protoRayService": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Required input field. Unique ray service name provided by user."
        },
        "namespace": {
          "type": "string",
          "title": "Required input field. ray service namespace provided by user"
        },
        "user": {
          "type": "string",
          "description": "Required field. This field indicates the user who owns the ray service."
        },
        "serveDeploymentGraphSpec": {
          "$ref": "#/definitions/protoServeDeploymentGraphSpec",
          "description": "The config for ray serve deployments."
        },
        "clusterSpec": {
          "$ref": "#/definitions/protoClusterSpec",
          "description": "The cluster template."
        },
        "rayServiceStatus": {
          "$ref": "#/definitions/protoRayServiceStatus",
          "description": "Output. The status for the ray service."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the ray service created."
        },
        "deleteAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The time that the ray service deleted."
        }
      }
    },
    "protoRayServiceEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Output. Unique Event Id."
        },
        "name": {
          "type": "string",
          "description": "Output. Human readable name for event."
        },
        "createdAt": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The creation time of the event."
        },
        "firstTimestamp": {
          "type": "string",
          "format": "date-time",
          "description": "Output. The last time the event occur."
        },
        "lastTimestamp": {
          "type": "string",
          "format": "date-time",
          "title": "Output. The first time the event occur"
        },
        "reason": {
          "type": "string",
          "description": "Output. The reason for the transition into the object's current status."
        },
        "message": {
          "type": "string",
          "description": "Output. A human-readable description of the status of this operation."
        },
        "type": {
          "type": "string",
          "title": "Output. Type of this event (Normal, Warning), new types could be added in the future"
        },
        "count": {
          "type": "integer",
          "format": "int32",
          "description": "Output. The number of times this event has occurred."
        }
      }
    },
    "protoRayServiceStatus": {
      "type": "object",
      "properties": {
        "applicationStatus": {
          "type": "string",
          "description": "The ray serve application status."
        },
        "applicationMessage": {
          "type": "string",
          "description": "A human-readable description of the status of this operation."
        },
        "serveDeploymentStatus": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoServeDeploymentStatus"
          },
          "description": "The status for each deployment."
        },
        "rayServiceEvents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoRayServiceEvent"
          },
          "description": "The related event for the ray service."
        },
        "rayClusterName": {
          "type": "string",
          "description": "The ray cluster name."
        },
        "rayClusterState": {
          "type": "string",
          "description": "The state for ray cluster."
        },
        "serviceEndpoint": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The service endpoint of the cluster and service."
        }
      }
    },
    "protoServeConfig": {
      "type": "object",
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Required input field. Unique ray service deployment name provided by user."
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "ray service deployment replicas, default set to 1."
        },
        "routePrefix": {
          "type": "string",
          "description": "ray service deployment route prefix indicated by user."
        },
        "maxConcurrentQueries": {
          "type": "integer",
          "format": "int32",
          "description": "max concurrent queries indicate for each ray service deployment."
        },
        "userConfig": {
          "type": "string",
          "description": "user config to the ray serve deployment."
        },
        "autoscalingConfig": {
          "type": "string",
          "description": "auto scaling config for ray serve deployment indicate by user."
        },
        "actorOptions": {
          "$ref": "#/definitions/protoActorOptions",
          "description": "actor options indicated resource of each deployment's actor."
        }
      }
    },
    "protoServeDeploymentGraphSpec": {
      "type": "object",
      "properties": {
        "importPath": {
          "type": "string",
          "description": "Required input field. Import path for load the ray serve."
        },
        "runtimeEnv": {
          "type": "string",
          "description": "runtime env for loading the ray serve."
        },
        "serveConfigs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoServeConfig"
          },
          "description": "deployments config of the ray serve."
        }
      }
    },
    "protoServeDeploymentStatus": {
      "type": "object",
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Unique ray service deployment name."
        },
        "status": {
          "type": "string",
          "description": "Status of single deployment."
        },
        "message": {
          "type": "string",
          "description": "A human-readable description of the status of this operation."
        }
      }
    },
    "protoUpdateRayServiceBody": {
      "type": "object",
      "properties": {
        "workerGroupUpdateSpec": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoWorkerGroupUpdateSpec"
          },
          "title": "specify the worker group to be update"
        },
        "serveDeploymentGraphSpec": {
          "$ref": "#/definitions/protoServeDeploymentGraphSpec",
          "description": "deployments config of the ray serve."
        }
      }
    },
    "protoVolume": {
      "type": "object",
      "properties": {
        "mountPath": {
          "type": "string"
        },
        "volumeType": {
          "$ref": "#/definitions/VolumeVolumeType"
        },
        "name": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "readOnly": {
          "type": "boolean"
        },
        "hostPathType": {
          "$ref": "#/definitions/VolumeHostPathType"
        },
        "mountPropagationMode": {
          "$ref": "#/definitions/VolumeMountPropagationMode"
        }
      }
    },
    "protoWorkerGroupSpec": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "title": "Required. Group name of the current worker group"
        },
        "computeTemplate": {
          "type": "string",
          "title": "Optional. The computeTemplate of head node group"
        },
        "image": {
          "type": "string",
          "title": "Optional field. This field will be used to retrieve right ray container"
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "title": "Required. Desired replicas of the worker group"
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Optional. Min replicas of the worker group"
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "title": "Optional. Max replicas of the worker group"
        },
        "rayStartParams": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Optional. The ray start parames of worker node group"
        },
        "volumes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protoVolume"
          },
          "title": "Optional. The volumes mount to worker pods"
        }
      }
    },
    "protoWorkerGroupUpdateSpec": {
      "type": "object",
      "properties": {
        "groupName": {
          "type": "string",
          "description": "The name of the worker group to be updated."
        },
        "replicas": {
          "type": "integer",
          "format": "int32",
          "description": "The replicas of the worker group to be updated."
        },
        "minReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "The min replicas of the worker group to be updated."
        },
        "maxReplicas": {
          "type": "integer",
          "format": "int32",
          "description": "The max replicas of the worker group to be updated."
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    }
  }
}
