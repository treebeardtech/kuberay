apiVersion: ray.io/v1alpha1
kind: RayCluster
metadata:
  labels:
    controller-tools.k8s.io: "1.0"
    # An unique identifier for the head node and workers of this cluster.
  name: raycluster-mini
spec:
  rayVersion: '$ray_version' # should match the Ray version in the image of the containers
  ######################headGroupSpecs#################################
  # head group template and specs, (perhaps 'group' is not needed in the name)
  headGroupSpec:
    # Kubernetes Service Type, valid values are 'ClusterIP', 'NodePort' and 'LoadBalancer'
    serviceType: ClusterIP
    # the pod replicas in this group typed head (assuming there could be more than 1 in the future)
    replicas: 1
    # the following params are used to complete the ray start: ray start --head --block --redis-port=6379 ...
    rayStartParams:
      port: '6379' # should match headService targetPort
      #include_webui: 'true'
      redis-password: 'LetMeInRay' # Deprecated since Ray 1.11 due to GCS bootstrapping enabled
      # webui_host: "10.1.2.60"
      dashboard-host: '0.0.0.0'
      num-cpus: '1' # can be auto-completed from the limits
      node-ip-address: $$MY_POD_IP # auto-completed as the head pod IP
      block: 'true'
    #pod template
    template:
      metadata:
        labels:
          # custom labels. NOTE: do not define custom labels start with `raycluster.`, they may be used in controller.
          # Refer to https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
          rayCluster: raycluster-compatibility-test
          groupName: headgroup # will be injected if missing
        # annotations for pod
        annotations:
          key: value
      spec:
        containers:
        - name: ray-head
          image: rayproject/ray:2.0.0
          env:
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          ports:
          - containerPort: 6379
            name: redis
          - containerPort: 8265 # Ray dashboard
            name: dashboard
          - containerPort: 10001
            name: client
          resources:
            limits:
              cpu: 1
              memory: "1G"
            requests:
              cpu: 1
              memory: "512Mi"
  workerGroupSpecs:
    - replicas: 1
      minReplicas: 1
      maxReplicas: 1
      groupName: small-group
      # the following params are used to complete the ray start: ray start --block --node-ip-address= ...
      rayStartParams:
        redis-password: 'LetMeInRay' # Deprecated since Ray 1.11 due to GCS bootstrapping enabled
        node-ip-address: $$MY_POD_IP
        block: 'true'
      #pod template
      template:
        metadata:
          labels:
            rayCluster: raycluster-compatibility-test
            groupName: small-group # will be injected if missing
          # annotations for pod
          annotations:
            key: value
        spec:
          initContainers: # to avoid worker crashing before head service is created
          - name: init-myservice
            image: busybox:1.28
            # Change the cluster postfix if you don't have a default setting
            command: ['sh', '-c', "until nslookup $$RAY_IP.$$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]
          containers:
          - name: machine-learning # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
            image: rayproject/ray:2.0.0
            # environment variables to set in the container.Optional.
            # Refer to https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
            env:
            - name: TYPE
              value: "worker"
            - name:  RAY_DISABLE_DOCKER_CPU_WARNING
              value: "1"
            - name: CPU_REQUEST
              valueFrom:
                resourceFieldRef:
                  containerName: machine-learning
                  resource: requests.cpu
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            ports:
            - containerPort: 80
            # use volumeMounts.Optional.
            # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
            volumeMounts:
              - mountPath: /var/log
                name: log-volume
          # use volumes
          # Refer to https://kubernetes.io/docs/concepts/storage/volumes/
          volumes:
            - name: log-volume
              emptyDir: {}
